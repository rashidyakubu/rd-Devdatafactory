{
	"name": "POSerial_CachetoODS",
	"properties": {
		"description": "Copy new or updated rows only from database using external control table",
		"activities": [
			{
				"name": "LookupLastWaterMark",
				"description": "Retrieve the last high-watermark value stored in external control table",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Landing_watermarktableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "LookupCurrentWaterMark",
				"description": "Retrieve  the current maximum value in watermark column of source data store",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 1",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set Run Start 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='PO'",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "DeltaCopyfromDB",
				"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "LookupCurrentWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "LookupLastWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Truncate Landing_POSerial Procedure",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "LookupDeltaOffset",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "OdbcSource",
						"query": {
							"value": "select SQLUser.POSerial.ID\n      ,SQLUser.POSerial.OriginalCost\n      ,SQLUser.POSerial.FreightAmount\n      ,SQLUser.POSerial.FreightInvoiceNumber\n      ,SQLUser.POSerial.SerialTypeCode\n      ,SQLUser.POSerial.Discount1\n      ,SQLUser.POSerial.Discount2\n      ,SQLUser.POSerial.Discount3\n      ,SQLUser.POSerial.Discount4\n      ,SQLUser.POSerial.Discount5\n      ,SQLUser.POSerial.Discount6\n      ,SQLUser.POSerial.Discount7\n      ,SQLUser.POSerial.Discount8\n      ,SQLUser.POSerial.Discount9\n      ,SQLUser.POSerial.Discount10\n      ,SQLUser.POSerial.Discount1Method\n      ,SQLUser.POSerial.Discount2Method\n      ,SQLUser.POSerial.Discount3Method\n      ,SQLUser.POSerial.Discount4Method\n      ,SQLUser.POSerial.Discount5Method\n      ,SQLUser.POSerial.Discount6Method\n      ,SQLUser.POSerial.Discount7Method\n      ,SQLUser.POSerial.Discount8Method\n      ,SQLUser.POSerial.Discount9Method\n      ,SQLUser.POSerial.Discount10Method\n      ,SQLUser.POSerial.Discount1Rate\n      ,SQLUser.POSerial.Discount2Rate\n      ,SQLUser.POSerial.Discount3Rate\n      ,SQLUser.POSerial.Discount4Rate\n      ,SQLUser.POSerial.Discount5Rate\n      ,SQLUser.POSerial.Discount6Rate\n      ,SQLUser.POSerial.Discount7Rate\n      ,SQLUser.POSerial.Discount8Rate\n      ,SQLUser.POSerial.Discount9Rate\n      ,SQLUser.POSerial.Discount10Rate\n      ,SQLUser.POSerial.DyeLot\n      ,SQLUser.POSerial.Available\n      ,SQLUser.POSerial.BinLocationCode\n      ,SQLUser.POSerial.Cost\n      ,SQLUser.POSerial.Costed\n      ,SQLUser.POSerial.DateReceived\n      ,SQLUser.POSerial.Features\n      ,SQLUser.POSerial.FloorPlan\n      ,SQLUser.POSerial.FloorPlanDueDate\n      ,SQLUser.POSerial.LocationCode\n      ,SQLUser.POSerial.ModelCode\n      ,SQLUser.POSerial.ModelDateStamp\n      ,SQLUser.POSerial.ModelLineTimeStamp\n      ,SQLUser.POSerial.Ordered\n      ,SQLUser.POSerial.POCode\n      ,SQLUser.POSerial.Received\n      ,SQLUser.POSerial.Returned\n      ,SQLUser.POSerial.RunNumber\n      ,SQLUser.POSerial.SerialCode\n      ,SQLUser.POSerial.SupplierInvoice\n      ,SQLUser.POSerial.TrustDocument\n      ,SQLUser.POSerial.TrustDocumentLine\nfrom \nSQLUser.POSerial INNER JOIN SQLUser.PO ON\nSQLUser.POSerial.POCode=SQLUser.PO.Code\n where @{pipeline().parameters.Data_Source_WaterMarkColumn2} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}'and @{pipeline().parameters.Data_Source_WaterMarkColumn2} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'",
							"type": "Expression"
						}
					},
					"sink": {
						"type": "AzureSqlSink"
					},
					"enableStaging": false,
					"dataIntegrationUnits": 0
				},
				"inputs": [
					{
						"referenceName": "OdbcDataSource",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "Landing_POSerialDataset",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "UpdateWaterMark",
				"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Run End 2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_ETLTimes]",
					"storedProcedureParameters": {
						"Column_Name": {
							"value": {
								"value": "@{pipeline().parameters.ETLEndTimeColumn}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"GetRunEnd": {
							"value": {
								"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group2}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Truncate Landing_POSerial Procedure",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[LandingTablesTruncate_POSerial]"
				},
				"linkedServiceName": {
					"referenceName": "Secondary1_Landing Linked Service",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Test",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[POSerial_Delete]"
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Test_2_Insert",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Test",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[POSerial_Insert]"
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Load Active Trigger Begin 1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_LoadActive]",
					"storedProcedureParameters": {
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group1}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Load Active Trigger End 2",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "UpdateWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_LoadActive]",
					"storedProcedureParameters": {
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group2}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "LookupDeltaOffset",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='PO' AND\n             [Group]=10",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Set Run Start 1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Run Start 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_ETLTimes]",
					"storedProcedureParameters": {
						"Column_Name": {
							"value": {
								"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"GetRunEnd": {
							"value": {
								"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group1}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Set Run End 1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Run End 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_ETLTimes]",
					"storedProcedureParameters": {
						"Column_Name": {
							"value": {
								"value": "@{pipeline().parameters.ETLEndTimeColumn}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"GetRunEnd": {
							"value": {
								"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group1}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Set Run Start 2",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Run Start 2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_ETLTimes]",
					"storedProcedureParameters": {
						"Column_Name": {
							"value": {
								"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"GetRunEnd": {
							"value": {
								"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group2}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Load Active Trigger End 1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set Run End 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_LoadActive]",
					"storedProcedureParameters": {
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group1}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Load Active Trigger Begin 2",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set Run Start 2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_LoadActive]",
					"storedProcedureParameters": {
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group2}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Get Run Start 1",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Get Run End 1",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "DeltaCopyfromDB",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Get Run Start 2",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Load Active Trigger End 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Get Run End 2",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Test_2_Insert",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			}
		],
		"parameters": {
			"Data_Source_Table_Name": {
				"type": "String",
				"defaultValue": "SQLUser.POSerial"
			},
			"Data_Source_WaterMarkColumn": {
				"type": "String",
				"defaultValue": "ModelDateStamp"
			},
			"Data_Destination_Container": {
				"type": "String",
				"defaultValue": "rd.POSerial"
			},
			"Data_Destination_Directory": {
				"type": "String"
			},
			"Control_Table_Table_Name": {
				"type": "String",
				"defaultValue": "watermark_table"
			},
			"Control_Table_Column_Name": {
				"type": "String",
				"defaultValue": "Invoicewatermark_value"
			},
			"Data_Source_WaterMarkColumn_modified": {
				"type": "string",
				"defaultValue": "SQLUser.POSerial.ModelDateStamp"
			},
			"DeltaOffset": {
				"type": "int",
				"defaultValue": -1
			},
			"ControlTable_Entity": {
				"type": "string",
				"defaultValue": "POSerial"
			},
			"ControlTable_Group1": {
				"type": "int",
				"defaultValue": 10
			},
			"ControlTable_Group2": {
				"type": "int",
				"defaultValue": 20
			},
			"ETLBeginTimeColumn": {
				"type": "string",
				"defaultValue": "ETL Last Run Start"
			},
			"ETLEndTimeColumn": {
				"type": "string",
				"defaultValue": "ETL Last Run End"
			},
			"Data_Source_WaterMarkColumn2": {
				"type": "string",
				"defaultValue": "SQLUser.PO.DateStarted"
			}
		},
		"variables": {
			"Run Start 1": {
				"type": "String"
			},
			"Run Start 2": {
				"type": "String"
			},
			"Run End 1": {
				"type": "String"
			},
			"Run End 2": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2021-06-10T14:34:44Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}