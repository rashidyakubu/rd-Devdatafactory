{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "rd-DevDataFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/InvoiceAddress_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Invoice'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select  SQLUser.InvoiceAddress.ID\n      ,TripNo\n      ,ParentDateStamp\n      ,ParentLineTimeStamp\n      ,SQLUser.InvoiceAddress.sysCreated\n      ,SQLUser.InvoiceAddress.sysModified\n      ,SQLUser.InvoiceAddress.Amount\n      ,SQLUser.InvoiceAddress.Code\n      ,SQLUser.InvoiceAddress.DateStamp\n      ,SQLUser.InvoiceAddress.Description\n      ,SQLUser.InvoiceAddress.InPackage\n      ,InvoiceCode\n      ,LineNo\n      ,LineTimeStamp\n      ,LineType\n      ,SQLUser.InvoiceAddress.LocationCode\n      ,SQLUser.InvoiceAddress.Qty\n      ,SQLUser.InvoiceAddress.Status\n      ,SQLUser.InvoiceAddress.Tax1\n      ,SQLUser.InvoiceAddress.Tax2\n      ,SQLUser.InvoiceAddress.Tax3\n      \nfrom \nSQLUser.InvoiceAddress INNER JOIN SQLUser.Invoice ON InvoiceCode=SQLUser.Invoice.Code\nwhere (@{pipeline().parameters.Data_Source2_WaterMarkColumn} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR (SQLUser.InvoiceAddress.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR SQLUser.InvoiceAddress.sysModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')) and (@{pipeline().parameters.Data_Source2_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR \n(SQLUser.InvoiceAddress.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR SQLUSer.InvoiceAddress.sysModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}')) ",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoiceAddressDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_InvoiceAddress]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Modified Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceAddress_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test_2_Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Modified Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceAddress_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Invoice' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Test_2_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.InvoiceAddress"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.InvoiceAddress"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceAddress.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "InvoiceAddress"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_Table_Name2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source2_WaterMarkColumn": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-08T23:54:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoiceMisc_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Invoice'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select   SQLUser.InvoiceMisc.ID      ,SQLUser.InvoiceMisc.TripNo      ,SQLUser.InvoiceMisc.Comment     ,SQLUser.InvoiceMisc.SubmittedDate     ,SQLUser.InvoiceMisc.SubmittedTime      ,SQLUser.InvoiceMisc.SubmittedUser     ,SQLUser.InvoiceMisc.CreditedDate     ,SQLUser.InvoiceMisc.CreditedTime     ,SQLUser.InvoiceMisc.CreditedUser      ,SQLUser.InvoiceMisc.InvoicePaymentRef      ,SQLUser.InvoiceMisc.UserVerified     ,SQLUser.InvoiceMisc.DateVerified     ,SQLUser.InvoiceMisc.TimeVerified      ,SQLUser.InvoiceMisc.CommissionCode      ,SQLUser.InvoiceMisc.EDIFormat      ,SQLUser.InvoiceMisc.InvoiceModelDateStamp   ,SQLUser.InvoiceMisc.InvoiceModelLineTimeStamp      ,SQLUser.InvoiceMisc.InvoiceModelInvoiceCode     ,SQLUser.InvoiceMisc.InvoiceModelCode   ,SQLUser.InvoiceMisc.BranchCode     ,SQLUser.InvoiceMisc.sysCreated    ,SQLUser.InvoiceMisc.sysModified     ,SQLUser.InvoiceMisc.DateCreated      ,SQLUser.InvoiceMisc.DateModified     ,SQLUser.InvoiceMisc.DateStamp      ,SQLUser.InvoiceMisc.GLCostCr      ,SQLUser.InvoiceMisc.GLCostDb      ,SQLUser.InvoiceMisc.GLRevenue      ,SQLUser.InvoiceMisc.InPackage     ,SQLUser.InvoiceMisc.InvoiceCode      ,SQLUser.InvoiceMisc.LineTimeStamp      ,SQLUser.InvoiceMisc.MiscCode      ,SQLUser.InvoiceMisc.MiscDesc     ,SQLUser.InvoiceMisc.Qty     ,SQLUser.InvoiceMisc.SellingPrice      ,SQLUser.InvoiceMisc.Tax1     ,SQLUser.InvoiceMisc.Tax2     ,SQLUser.InvoiceMisc.Tax3     ,SQLUser.InvoiceMisc.Total     ,SQLUser.InvoiceMisc.UnitCost     ,SQLUser.InvoiceMisc.UpdateHistory     ,SQLUser.InvoiceMisc.UserCreated      ,SQLUser.InvoiceMisc.UserModified     ,SQLUser.InvoiceMisc.Warranty\n      \nfrom \nSQLUser.InvoiceMisc INNER JOIN SQLUser.Invoice ON InvoiceCode=SQLUser.Invoice.Code\nwhere (@{pipeline().parameters.Data_Source2_WaterMarkColumn} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR (SQLUser.InvoiceMisc.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR SQLUser.InvoiceMisc.sysModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')) and (@{pipeline().parameters.Data_Source2_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR \n(SQLUser.InvoiceMisc.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR SQLUSer.InvoiceMisc.sysModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}')) ",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoiceMiscDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_InvoiceMisc]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceMisc_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Modified Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceMisc_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Invoice' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert Modified Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.InvoiceMisc"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.InvoiceMisc"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceMisc.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -2
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "InvoiceMisc"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_Table_Name2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source2_WaterMarkColumn": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-09T05:28:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoiceModel_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Invoice'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select         SQLUser.InvoiceModel.ID\n      ,SQLUser.InvoiceModel.TakenStatus\n      ,SQLUser.InvoiceModel.TakenDate\n      ,SQLUser.InvoiceModel.AverageCost\n      ,SQLUser.InvoiceModel.StandardCost\n      ,SQLUser.InvoiceModel.LastCost\n      ,SQLUser.InvoiceModel.Color\n      ,SQLUser.InvoiceModel.POCode\n      ,SQLUser.InvoiceModel.Reference\n      ,SQLUser.InvoiceModel.PODateStamp\n      ,SQLUser.InvoiceModel.POLineTimeStamp\n      ,SQLUser.InvoiceModel.SpecialOrderDate\n      ,SQLUser.InvoiceModel.TripNo\n      ,SQLUser.InvoiceModel.LandedCost\n      ,SQLUser.InvoiceModel.AutoBackorder\n      ,SQLUser.InvoiceModel.ManufacturersWarranty\n      ,SQLUser.InvoiceModel.ReplacementCost\n      ,SQLUser.InvoiceModel.UserVerified\n      ,SQLUser.InvoiceModel.DateVerified\n      ,SQLUser.InvoiceModel.TimeVerified\n      ,SQLUser.InvoiceModel.OriginalCost\n      ,SQLUser.InvoiceModel.ReserveExclusive\n      ,SQLUser.InvoiceModel.CommissionCode\n      ,SQLUser.InvoiceModel.EDIFormat\n      ,SQLUser.InvoiceModel.BranchCode\n      ,SQLUser.InvoiceModel.sysCreated\n      ,SQLUser.InvoiceModel.sysModified\n      ,SQLUser.InvoiceModel.DateCreated\n      ,SQLUser.InvoiceModel.DateModified\n      ,SQLUser.InvoiceModel.DateStamp\n      ,SQLUser.InvoiceModel.InPackage\n      ,SQLUser.InvoiceModel.InvoiceCode\n      ,SQLUser.InvoiceModel.LineTimeStamp\n      ,SQLUser.InvoiceModel.LocationCode\n      ,SQLUser.InvoiceModel.ModelCode\n      ,SQLUser.InvoiceModel.ModelDesc\n      ,SQLUser.InvoiceModel.NewUsed\n      ,SQLUser.InvoiceModel.QtyOrdered\n      ,SQLUser.InvoiceModel.QtyReserved\n      ,SQLUser.InvoiceModel.QtyShipped\n      ,SQLUser.InvoiceModel.SellingPrice\n      ,SQLUser.InvoiceModel.Spiff\n      ,SQLUser.InvoiceModel.Status\n      ,SQLUser.InvoiceModel.Tax1\n      ,SQLUser.InvoiceModel.Tax1CostList\n      ,SQLUser.InvoiceModel.Tax1Included\n      ,SQLUser.InvoiceModel.Tax1Percentage\n      ,SQLUser.InvoiceModel.Tax2\n      ,SQLUser.InvoiceModel.Tax3\n      ,SQLUser.InvoiceModel.Total\n      ,SQLUser.InvoiceModel.UserCreated\n      ,SQLUser.InvoiceModel.UserModified\n      \nfrom \nSQLUser.InvoiceModel INNER JOIN SQLUser.Invoice ON InvoiceCode=SQLUser.Invoice.Code\nwhere (@{pipeline().parameters.Data_Source2_WaterMarkColumn} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR (SQLUser.InvoiceModel.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR SQLUser.InvoiceModel.sysModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')) and (@{pipeline().parameters.Data_Source2_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR \n(SQLUser.InvoiceModel.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR SQLUSer.InvoiceModel.sysModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}')) ",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoiceModelDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_InvoiceModel]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceModel_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Modified Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceModel_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Invoice' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert Modified Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.InvoiceModel"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "SQLUser.InvoiceModel.sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.InvoiceModel"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceModel.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "InvoiceModel"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_Table_Name2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source2_WaterMarkColumn": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					},
					"Data_Source2_WaterMarkColumn2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysCreated"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-10T23:02:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoicePayment_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Invoice'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select               SQLuser.InvoicePayment.ID\n      ,SQLuser.InvoicePayment.TripNo\n      ,SQLuser.InvoicePayment.CashedOut\n      ,SQLuser.InvoicePayment.CashOutUser\n      ,SQLuser.InvoicePayment.CashOutDateStamp\n      ,SQLuser.InvoicePayment.CashOutTimeStamp\n      ,SQLuser.InvoicePayment.TerminalCode\n      ,SQLuser.InvoicePayment.PayerIdentifier\n      ,SQLuser.InvoicePayment.SPAN\n      ,SQLuser.InvoicePayment.PayerDataManagedUntilDate\n      ,SQLuser.InvoicePayment.CardBrand\n      ,SQLuser.InvoicePayment.EntryMethod\n      ,SQLuser.InvoicePayment.InvoicePaymentRef\n      ,SQLuser.InvoicePayment.PayerIdType\n      ,SQLuser.InvoicePayment.sysCreated\n      ,SQLuser.InvoicePayment.sysModified\n      ,SQLuser.InvoicePayment.BankTransactionID\n      ,SQLuser.InvoicePayment.Amount\n      ,SQLuser.InvoicePayment.AuthCode\n      ,SQLuser.InvoicePayment.AuthStatus\n      ,SQLuser.InvoicePayment.BranchCode\n      ,SQLuser.InvoicePayment.CardNumber\n      ,SQLuser.InvoicePayment.DateCreated\n      ,SQLuser.InvoicePayment.DateModified\n      ,SQLuser.InvoicePayment.DateStamp\n      ,SQLuser.InvoicePayment.Description\n      ,SQLuser.InvoicePayment.ExpiryDate\n      ,SQLuser.InvoicePayment.InvoiceCode\n      ,SQLuser.InvoicePayment.LineTimeStamp\n      ,SQLuser.InvoicePayment.PaymentTypeCode\n      ,SQLuser.InvoicePayment.PostDate\n      ,SQLuser.InvoicePayment.RespBankText\n      ,SQLuser.InvoicePayment.RespBatchNo\n      ,SQLuser.InvoicePayment.RespDate\n      ,SQLuser.InvoicePayment.RespItemNo\n      ,SQLuser.InvoicePayment.RespRefNo\n      ,SQLuser.InvoicePayment.RespSettlementAmount\n      ,SQLuser.InvoicePayment.RespTime\n      ,SQLuser.InvoicePayment.Status\n      ,SQLuser.InvoicePayment.UserCreated\n      ,SQLuser.InvoicePayment.UserModified\nfrom \nSQLUser.InvoicePayment INNER JOIN SQLUser.Invoice ON InvoiceCode=SQLUser.Invoice.Code\nwhere (@{pipeline().parameters.Data_Source2_WaterMarkColumn} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR (SQLUser.InvoicePayment.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR SQLUser.InvoicePayment.sysModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')) and (@{pipeline().parameters.Data_Source2_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR \n(SQLUser.InvoicePayment.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR SQLUSer.InvoicePayment.sysModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}')) ",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoicePaymentDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_InvoicePayment]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Modified Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoicePayment_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Modified Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoicePayment_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Invoice' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.InvoicePayment"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.InvoicePayment"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.InvoicePayment.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "InvoicePayment"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_Table_Name2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source2_WaterMarkColumn": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					},
					"Data_Source2_WaterMarkColumn2": {
						"type": "string",
						"defaultValue": "SQLUser.InvoicePayment.sysCreated"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-09T05:30:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoiceSerial_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Invoice'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select               SQLUser.InvoiceSerial.ID\n      ,SQLUser.InvoiceSerial.TakenLocationCode\n      ,SQLUser.InvoiceSerial.ReturnReasonCode\n      ,SQLUser.InvoiceSerial.ReturnOutcomeCode\n      ,SQLUser.InvoiceSerial.ReturnInitiatedByCode\n      ,SQLUser.InvoiceSerial.sysCreated\n      ,SQLUser.InvoiceSerial.sysModified\n      ,SQLUser.InvoiceSerial.DateCommitted\n      ,SQLUser.InvoiceSerial.DateCreated\n      ,SQLUser.InvoiceSerial.DateModified\n      ,SQLUser.InvoiceSerial.InvoiceCode\n      ,SQLUser.InvoiceSerial.LocationCode\n      ,SQLUser.InvoiceSerial.ModelCode\n      ,SQLUser.InvoiceSerial.ModelDateStamp\n      ,SQLUser.InvoiceSerial.ModelLineTimeStamp\n      ,SQLUser.InvoiceSerial.Returned\n      ,SQLUser.InvoiceSerial.SerialCode\n      ,SQLUser.InvoiceSerial.Status\n      ,SQLUser.InvoiceSerial.Taken\n      ,SQLUser.InvoiceSerial.TakenDate\n      ,SQLUser.InvoiceSerial.TakenStatus\n      ,SQLUser.InvoiceSerial.UnitCost\n      ,SQLUser.InvoiceSerial.UserCreated\n      ,SQLUser.InvoiceSerial.UserModified\n      \nfrom \nSQLUser.InvoiceSerial INNER JOIN SQLUser.Invoice ON InvoiceCode=SQLUser.Invoice.Code\nwhere (@{pipeline().parameters.Data_Source2_WaterMarkColumn} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR (SQLUser.InvoiceSerial.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR SQLUser.InvoiceSerial.sysModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')) and (@{pipeline().parameters.Data_Source2_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR \n(SQLUser.InvoiceSerial.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR SQLUSer.InvoiceSerial.sysModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'))",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoiceSerialDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_InvoiceSerial]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceSerial_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Modified Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceSerial_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Invoice' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert Modified Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.InvoiceSerial"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.InvoiceSerial"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceSerial.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "InvoiceSerial"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_Table_Name2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source2_WaterMarkColumn": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					},
					"Data_Source2_WaterMarkColumn2": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceSerial.sysCreated"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-09T05:30:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoiceWarranty_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Invoice'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select         SQLUser.InvoiceWarranty.ID\n      ,SQLUser.InvoiceWarranty.TripNo\n      ,SQLUser.InvoiceWarranty.Acknowledged\n      ,SQLUser.InvoiceWarranty.DateAcknowledged\n      ,SQLUser.InvoiceWarranty.OrgModSelPrice\n      ,SQLUser.InvoiceWarranty.CheckException\n      ,SQLUser.InvoiceWarranty.UserVerified\n      ,SQLUser.InvoiceWarranty.DateVerified\n      ,SQLUser.InvoiceWarranty.TimeVerified\n      ,SQLUser.InvoiceWarranty.CommissionCode\n      ,SQLUser.InvoiceWarranty.BranchCode\n      ,SQLUser.InvoiceWarranty.sysCreated\n      ,SQLUser.InvoiceWarranty.sysModified\n      ,SQLUser.InvoiceWarranty.Commission\n      ,SQLUser.InvoiceWarranty.ContractNumber\n      ,SQLUser.InvoiceWarranty.DateCreated\n      ,SQLUser.InvoiceWarranty.DateModified\n      ,SQLUser.InvoiceWarranty.DateStamp\n      ,SQLUser.InvoiceWarranty.EndDate\n      ,SQLUser.InvoiceWarranty.ExtWarrantyCode\n      ,SQLUser.InvoiceWarranty.ExtWarrantyDesc\n      ,SQLUser.InvoiceWarranty.GLCostCr\n      ,SQLUser.InvoiceWarranty.GLCostDb\n      ,SQLUser.InvoiceWarranty.GLRevenue\n      ,SQLUser.InvoiceWarranty.InPackage\n      ,SQLUser.InvoiceWarranty.InvoiceCode\n      ,SQLUser.InvoiceWarranty.LineTimeStamp\n      ,SQLUser.InvoiceWarranty.Model\n      ,SQLUser.InvoiceWarranty.SellingPrice\n      ,SQLUser.InvoiceWarranty.Serial\n      ,SQLUser.InvoiceWarranty.StartDate\n      ,SQLUser.InvoiceWarranty.Tax1\n      ,SQLUser.InvoiceWarranty.Tax2\n      ,SQLUser.InvoiceWarranty.Tax3\n      ,SQLUser.InvoiceWarranty.UnitCost\n      ,SQLUser.InvoiceWarranty.UserCreated\n      ,SQLUser.InvoiceWarranty.UserModified\nfrom \nSQLUser.InvoiceWarranty INNER JOIN SQLUser.Invoice ON InvoiceCode=SQLUser.Invoice.Code\nwhere (@{pipeline().parameters.Data_Source2_WaterMarkColumn} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR (SQLUser.InvoiceWarranty.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR SQLUser.InvoiceWarranty.sysModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')) and (@{pipeline().parameters.Data_Source2_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR \n(SQLUser.InvoiceWarranty.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR SQLUSer.InvoiceWarranty.sysModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'))\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoiceWarrantyDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_InvoiceWarranty]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Modified Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceWarranty_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Modified Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceWarranty_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Invoice' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.InvoiceWarranty"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.InvoiceWarranty"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceWarranty.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "InvoiceWarranty"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_Table_Name2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source2_WaterMarkColumn": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					},
					"Data_Source2_WaterMarkColumn2": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceWarranty.sysCreated"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-09T05:30:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Invoice_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Invoice'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select  ID , Financed , Void , Qualification , Priority , Tax3Percentage \n      , SvcRepairCode1 , SvcRepairCode2 , SvcRepairCode3 , SvcRepairCode4 , ContractCode , SvcContract \n      , UserFinished , UserPosted , UpdateHistoryWarranty , ShipMethod , TimeCreated , TimeModified , TimeFinished \n      , DispatchUnits , EDIDateStamp , EDITimeStamp , PrintMethod , DispatchStartTime , TripChargeCode \n      , TripChargeAmount \n      , Locked \n      , MobileTechInvoiceCode \n      , ServiceRequestID \n      , CarrierCode \n      , ShipViaCode \n      , JobStatusUpdate \n      , DispatchEmail \n      , LastDateSaved \n      , LastTimeSaved \n      , Terms \n      , SvcEquipmentNumber \n      , WebOrderID \n      , Department \n      , CreditStatusCode \n      , CreditApprovedUserCode \n      , CreditApprovedDateStamp \n      , CreditApprovedTimeStamp \n      , EDIMaroline \n      , RequestedDate \n      , SvcCSRInvoice \n      , SvcSoldList \n      , SvcSoldSTDCost \n      , SvcFollowUpDate \n      , SvcScheduleDate \n      , Tax2MaxAmount \n      , EDIWhirlpool \n      , MinDepositPercent \n      , UnitModifier \n      , DateFinished \n      , DatePosted \n      , TimePosted \n      , TTRTaxCalculated \n      , PickUpBranchCode \n      , PodiumOptOut \n      , SignCustmizedFields \n      , AVBSaleDateSent \n      , AVBSaleTimeSent \n      , sysCreated \n      , sysModified \n      , TTRJurisdictionCode \n      , BranchCode \n      , COGSPosted \n      , CallSequence \n      , Code \n      , CommittedPaymentTotal \n      , DateCreated \n      , DateModified \n      , DispatchPriority \n      , DispatchRequestedRouteCode \n      , DispatchSpecRequest \n      , DispatchTime \n      , DispatchTimeAM \n      , Estimate \n      , Field1 \n      , Field2 \n      , Field3 \n      , Field4 \n      , Field5 \n      , InvFinishDate \n      , InvStartDate \n      , InvTypeCode \n      , ItemListPriceCode \n      , ItemTotal \n      , JobLocation \n      , JobNumber \n      , JobStatusCode \n      , LaborRate \n      , LaborTotal \n      , MapReference \n      , MapZoneCode \n      , MiscTotal \n      , OpenPaymentTotal \n      , OtherListPriceCode \n      , PONumber \n      , PaymentTypeCode \n      , PickUpDate \n      , Reference \n      , SaleReferralCode \n      , Salesperson1Code \n      , Salesperson2Code \n      , Salesperson2Percentage \n      , ScheduleDate \n      , SerialListPriceCode \n      , SerialTotal \n      , Status \n      , SvcAgreementExpDate \n      , SvcAgreementNumber \n      , SvcBrandCode \n      , SvcCenter \n      , SvcCenterNumber \n      , SvcComplaintCode \n      , SvcComplaintDesc \n      , SvcDatePurchased \n      , SvcDealerCode \n      , SvcDealerDesc \n      , SvcDistributorNumber \n      , SvcInWarranty \n      , SvcMfgCodeEiaNumber \n      , SvcMicroLeak \n      , SvcMiles \n      , SvcMilesRate \n      , SvcMilesTotal \n      , SvcModel \n      , SvcMotorNewNumber \n      , SvcMotorOldNumber \n      , SvcPerformedCode \n      , SvcPerformedDesc \n      , SvcProduct \n      , SvcProductCode \n      , SvcRepairCatMinorMajor \n      , SvcRepairCategory \n      , SvcRepairCode \n      , SvcRunNumber \n      , SvcSerial \n      , SvcSpecAuthNumber \n      , SvcStockMerchandise \n      , SvcTimeCompleted1 \n      , SvcTimeCompleted2 \n      , SvcTimeOnJob1 \n      , SvcTimeOnJob2 \n      , SvcTimeStarted1 \n      , SvcTimeStarted2 \n      , Tax1Exempt \n      , Tax1Total \n      , Tax2Code \n      , Tax2Exempt \n      , Tax2Percentage \n      , Tax2Total \n      , Tax3Exempt \n      , Tax3Total \n      , UserCreated \n      , UserModified \n      , Warranty \n      , WarrantyField1 \n      , WarrantyField2 \n      , WarrantyField3 \n      , WarrantyField4 \n      , WarrantyField5 \n      , WtyTotal \nfrom \n@{pipeline().parameters.Data_Source_Table_Name} \n\t where (@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}'  OR\n@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} IS NULL OR\nSQLUser.Invoice.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')\n\t and (@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'  OR \nSQLUser.Invoice.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}')\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoiceDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Invoice]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Invoice_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test_2_Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Invoice_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Invoice' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Test_2_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.Invoice"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Invoice"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-11T13:58:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Location_Cache to ODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Location",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.Location"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_LocationDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Location",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Location]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Location_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateControlTable",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ODSLocation_Truncate]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Location"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-04T14:53:36Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Misc_Cache to ODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Misc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.Misc"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_MiscDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Misc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Misc]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Misc_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ODSMisc_Truncate]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Misc"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-03T17:08:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ModelNote_Cache to ODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Branch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.ModelNote"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_ModelNote",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Branch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_ModelNote]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ModelNote_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateControlTable",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ODSModelNote_Truncate]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "ModelNote"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-11T00:42:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Model_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Model'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select ID\n      ,MfgBarcode\n      ,UPCBarcode\n      ,RootModelCode\n      ,PackageCode\n      ,Link\n      ,Identifier\n      ,BarcodeSchema\n      ,AllowSpecialOrder\n      ,UpdateImportPricing\n      ,WarrantyTypeCode\n      ,AllowPackageWty\n      ,ShippingMethodCode\n      ,Volume\n      ,UnloadTime\n      ,AutoNumber\n      ,ShipAnySerial\n      ,SalePrice\n      ,SaleStartDate\n      ,SaleEndDate\n      ,Feature1\n      ,Feature2\n      ,Feature3\n      ,Feature4\n      ,Feature5\n      ,Feature6\n      ,Feature7\n      ,Feature8\n      ,Feature9\n      ,Feature10\n      ,Dimension1\n      ,Dimension2\n      ,Warranty1\n      ,Warranty2\n      ,PTDesc\n      ,InstallationEstimate\n      ,UpdateImportCost\n      ,Dimension3\n      ,Misc2Code\n      ,Misc3Code\n      ,Misc4Code\n      ,Misc5Code\n      ,MiscPrompt\n      ,Misc2Prompt\n      ,Misc3Prompt\n      ,Misc4Prompt\n      ,Misc5Prompt\n      ,ExtWarrantyPrompt\n      ,ExtWarranty2Prompt\n      ,ExtWarranty3Prompt\n      ,ExtWarranty4Prompt\n      ,ExtWarranty5Prompt\n      ,ExtWarranty2Code\n      ,ExtWarranty3Code\n      ,ExtWarranty4Code\n      ,ExtWarranty5Code\n      ,Item1Prompt\n      ,Item2Prompt\n      ,Item3Prompt\n      ,Item4Prompt\n      ,Item5Prompt\n      ,Item1Code\n      ,Item2Code\n      ,Item3Code\n      ,Item4Code\n      ,Item5Code\n      ,Model1Prompt\n      ,Model2Prompt\n      ,Model3Prompt\n      ,Model4Prompt\n      ,Model5Prompt\n      ,Model1Code\n      ,Model2Code\n      ,Model3Code\n      ,Model4Code\n      ,Model5Code\n      ,ImmediateReservedDays\n      ,Spiff2\n      ,Spiff2EndDate\n      ,Spiff2StartDate\n      ,CommentPrompt\n      ,Comment2Prompt\n      ,Comment3Prompt\n      ,Comment4Prompt\n      ,Comment5Prompt\n      ,Comment2Code\n      ,Comment3Code\n      ,Comment4Code\n      ,Comment5Code\n      ,Discount1\n      ,Discount2\n      ,Discount3\n      ,Discount4\n      ,Discount5\n      ,Discount6\n      ,Discount7\n      ,Discount8\n      ,Discount9\n      ,Discount10\n      ,NotUMRP\n      ,Flooring\n      ,MasterPackQty\n      ,ABCRating\n      ,ActualSpiff\n      ,SalePrice2\n      ,SaleStartDate2\n      ,SaleEndDate2\n      ,Weight\n      ,LinqProductId\n      ,BeingDiscontinued\n      ,Active\n      ,AverageCost\n      ,Barcode\n      ,BeginYearQty\n      ,BinLocationCode\n      ,BrandCode\n      ,Code\n      ,Color\n      ,CommentCode\n      ,DateCreated\n      ,DateModified\n      ,Description\n      ,EOQ\n      ,Equivalent\n      ,ExtWarrantyCode\n      ,Field1\n      ,Field2\n      ,Field3\n      ,Field4\n      ,Field5\n      ,InventoryTypeCode\n      ,LandedCost\n      ,LandingFactor\n      ,LastCost\n      ,LastDateOrdered\n      ,LastDateReceived\n      ,LastDateSold\n      ,ListPrice\n      ,LocQOH\n      ,LocYTD\n      ,MainStockQOH\n      ,MainStockYTD\n      ,ManufacturersWarranty\n      ,MfgReturned\n      ,MiscCode\n      ,NewUsed\n      ,Note\n      ,Obsolete\n      ,OriginalCost\n      ,PicturePath\n      ,Points\n      ,PriceTag\n      ,ProductCode\n      ,ReplacementCost\n      ,ReplacementCostEffectiveDate\n      ,ResizePicture\n      ,SKU\n      ,Spiff\n      ,SpiffEndDate\n      ,SpiffStartDate\n      ,StandardCost\n      ,Stock\n      ,Substituted\n      ,SupplierCode\n      ,Tax1\n      ,Tax1CostList\n      ,Tax1Included\n      ,Tax1Percentage\n      ,Tax2\n      ,Tax3\n      ,TotalBooked\n      ,TotalLastYear\n      ,TotalMax\n      ,TotalMin\n      ,TotalNotAvailable\n      ,TotalPrevLastYear\n      ,TotalQOO\n      ,TotalReserved\n      ,UserCreated\n      ,UserModified\nfrom \n@{pipeline().parameters.Data_Source_Table_Name} \n\t where \n@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' \n\t and @{pipeline().parameters.Data_Source_WaterMarkColumn_modified} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' \n\nUNION\n\nselect ID\n      ,MfgBarcode\n      ,UPCBarcode\n      ,RootModelCode\n      ,PackageCode\n      ,Link\n      ,Identifier\n      ,BarcodeSchema\n      ,AllowSpecialOrder\n      ,UpdateImportPricing\n      ,WarrantyTypeCode\n      ,AllowPackageWty\n      ,ShippingMethodCode\n      ,Volume\n      ,UnloadTime\n      ,AutoNumber\n      ,ShipAnySerial\n      ,SalePrice\n      ,SaleStartDate\n      ,SaleEndDate\n      ,Feature1\n      ,Feature2\n      ,Feature3\n      ,Feature4\n      ,Feature5\n      ,Feature6\n      ,Feature7\n      ,Feature8\n      ,Feature9\n      ,Feature10\n      ,Dimension1\n      ,Dimension2\n      ,Warranty1\n      ,Warranty2\n      ,PTDesc\n      ,InstallationEstimate\n      ,UpdateImportCost\n      ,Dimension3\n      ,Misc2Code\n      ,Misc3Code\n      ,Misc4Code\n      ,Misc5Code\n      ,MiscPrompt\n      ,Misc2Prompt\n      ,Misc3Prompt\n      ,Misc4Prompt\n      ,Misc5Prompt\n      ,ExtWarrantyPrompt\n      ,ExtWarranty2Prompt\n      ,ExtWarranty3Prompt\n      ,ExtWarranty4Prompt\n      ,ExtWarranty5Prompt\n      ,ExtWarranty2Code\n      ,ExtWarranty3Code\n      ,ExtWarranty4Code\n      ,ExtWarranty5Code\n      ,Item1Prompt\n      ,Item2Prompt\n      ,Item3Prompt\n      ,Item4Prompt\n      ,Item5Prompt\n      ,Item1Code\n      ,Item2Code\n      ,Item3Code\n      ,Item4Code\n      ,Item5Code\n      ,Model1Prompt\n      ,Model2Prompt\n      ,Model3Prompt\n      ,Model4Prompt\n      ,Model5Prompt\n      ,Model1Code\n      ,Model2Code\n      ,Model3Code\n      ,Model4Code\n      ,Model5Code\n      ,ImmediateReservedDays\n      ,Spiff2\n      ,Spiff2EndDate\n      ,Spiff2StartDate\n      ,CommentPrompt\n      ,Comment2Prompt\n      ,Comment3Prompt\n      ,Comment4Prompt\n      ,Comment5Prompt\n      ,Comment2Code\n      ,Comment3Code\n      ,Comment4Code\n      ,Comment5Code\n      ,Discount1\n      ,Discount2\n      ,Discount3\n      ,Discount4\n      ,Discount5\n      ,Discount6\n      ,Discount7\n      ,Discount8\n      ,Discount9\n      ,Discount10\n      ,NotUMRP\n      ,Flooring\n      ,MasterPackQty\n      ,ABCRating\n      ,ActualSpiff\n      ,SalePrice2\n      ,SaleStartDate2\n      ,SaleEndDate2\n      ,Weight\n      ,LinqProductId\n      ,BeingDiscontinued\n      ,Active\n      ,AverageCost\n      ,Barcode\n      ,BeginYearQty\n      ,BinLocationCode\n      ,BrandCode\n      ,Code\n      ,Color\n      ,CommentCode\n      ,DateCreated\n      ,DateModified\n      ,Description\n      ,EOQ\n      ,Equivalent\n      ,ExtWarrantyCode\n      ,Field1\n      ,Field2\n      ,Field3\n      ,Field4\n      ,Field5\n      ,InventoryTypeCode\n      ,LandedCost\n      ,LandingFactor\n      ,LastCost\n      ,LastDateOrdered\n      ,LastDateReceived\n      ,LastDateSold\n      ,ListPrice\n      ,LocQOH\n      ,LocYTD\n      ,MainStockQOH\n      ,MainStockYTD\n      ,ManufacturersWarranty\n      ,MfgReturned\n      ,MiscCode\n      ,NewUsed\n      ,Note\n      ,Obsolete\n      ,OriginalCost\n      ,PicturePath\n      ,Points\n      ,PriceTag\n      ,ProductCode\n      ,ReplacementCost\n      ,ReplacementCostEffectiveDate\n      ,ResizePicture\n      ,SKU\n      ,Spiff\n      ,SpiffEndDate\n      ,SpiffStartDate\n      ,StandardCost\n      ,Stock\n      ,Substituted\n      ,SupplierCode\n      ,Tax1\n      ,Tax1CostList\n      ,Tax1Included\n      ,Tax1Percentage\n      ,Tax2\n      ,Tax3\n      ,TotalBooked\n      ,TotalLastYear\n      ,TotalMax\n      ,TotalMin\n      ,TotalNotAvailable\n      ,TotalPrevLastYear\n      ,TotalQOO\n      ,TotalReserved\n      ,UserCreated\n      ,UserModified\nfrom \n@{pipeline().parameters.Data_Source_Table_Name} \n\t where @{pipeline().parameters.Data_Source_WaterMarkColumn_modified} IS NULL ",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_ModelDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Model]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Model_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test_2_Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Model_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Model' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Test_2_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.Model"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "DateModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.Model"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.Model.DateModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Model"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-04T14:10:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/POModel_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='PO'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select SQLUSer.POModel.ID\n      ,SQLUSer.POModel.StandardCost\n      ,SQLUSer.POModel.OrderExclusive\n      ,SQLUSer.POModel.SerialTypeCode\n      ,SQLUSer.POModel.ReceiveToLocation\n      ,SQLUSer.POModel.Discount1\n      ,SQLUSer.POModel.Discount2\n      ,SQLUSer.POModel.Discount3\n      ,SQLUSer.POModel.Discount4\n      ,SQLUSer.POModel.Discount5\n      ,SQLUSer.POModel.Discount6\n      ,SQLUSer.POModel.Discount7\n      ,SQLUSer.POModel.Discount8\n      ,SQLUSer.POModel.Discount9\n      ,SQLUSer.POModel.Discount10\n      ,SQLUSer.POModel.Discount1Method\n      ,SQLUSer.POModel.Discount2Method\n      ,SQLUSer.POModel.Discount3Method\n      ,SQLUSer.POModel.Discount4Method\n      ,SQLUSer.POModel.Discount5Method\n      ,SQLUSer.POModel.Discount6Method\n      ,SQLUSer.POModel.Discount7Method\n      ,SQLUSer.POModel.Discount8Method\n      ,SQLUSer.POModel.Discount9Method\n      ,SQLUSer.POModel.Discount10Method\n      ,SQLUSer.POModel.Discount1Rate\n      ,SQLUSer.POModel.Discount2Rate\n      ,SQLUSer.POModel.Discount3Rate\n      ,SQLUSer.POModel.Discount4Rate\n      ,SQLUSer.POModel.Discount5Rate\n      ,SQLUSer.POModel.Discount6Rate\n      ,SQLUSer.POModel.Discount7Rate\n      ,SQLUSer.POModel.Discount8Rate\n      ,SQLUSer.POModel.Discount9Rate\n      ,SQLUSer.POModel.Discount10Rate\n      ,SQLUSer.POModel.Unreleased\n      ,SQLUSer.POModel.RequestedDeliveryDate\n      ,SQLUSer.POModel.ETADateMostUpdated\n      ,SQLUSer.POModel.EDISentDate\n      ,SQLUSer.POModel.EDISentTime\n      ,SQLUSer.POModel.RSDMostUpdated\n      ,SQLUSer.POModel.BackOrderInvoiceCode\n      ,SQLUSer.POModel.BackOrderInvoiceDateStamp\n      ,SQLUSer.POModel.BackOrderInvoiceLineTimeStamp\n      ,SQLUSer.POModel.CostFactor\n      ,SQLUSer.POModel.Costed\n      ,SQLUSer.POModel.DateReceived\n      ,SQLUSer.POModel.DateStamp\n      ,SQLUSer.POModel.ETADate\n      ,SQLUSer.POModel.ExtendedFactoredCost\n      ,SQLUSer.POModel.ExtendedUnitCost\n      ,SQLUSer.POModel.LineTimeStamp\n      ,SQLUSer.POModel.LocationCode\n      ,SQLUSer.POModel.ModelCode\n      ,SQLUSer.POModel.Ordered\n      ,SQLUSer.POModel.POCode\n      ,SQLUSer.POModel.PackingSlipNumber\n      ,SQLUSer.POModel.QtyOrdered\n      ,SQLUSer.POModel.QtyPrevReceived\n      ,SQLUSer.POModel.QtyReceived\n      ,SQLUSer.POModel.QtySuggested\n      ,SQLUSer.POModel.QuotedCost\n      ,SQLUSer.POModel.Received\n      ,SQLUSer.POModel.Reference\n      ,SQLUSer.POModel.SupplierInvoice\n      ,SQLUSer.POModel.UnitCost\nfrom \nSQLUser.POModel INNER JOIN SQLUser.PO ON\nSQLUser.POModel.POCode=SQLUser.PO.Code\n where @{pipeline().parameters.Data_Source_WaterMarkColumn2} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}'and @{pipeline().parameters.Data_Source_WaterMarkColumn2} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_POModelDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_POModel]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[POModel_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test_2_Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[POModel_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='PO' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Test_2_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.POModel"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "DateStamp"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.POModel"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.POModel.DateStamp"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "POModel"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_WaterMarkColumn2": {
						"type": "string",
						"defaultValue": "SQLUser.PO.DateStarted"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-10T05:37:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/POSerial_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='PO'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_POSerial Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select SQLUser.POSerial.ID\n      ,SQLUser.POSerial.OriginalCost\n      ,SQLUser.POSerial.FreightAmount\n      ,SQLUser.POSerial.FreightInvoiceNumber\n      ,SQLUser.POSerial.SerialTypeCode\n      ,SQLUser.POSerial.Discount1\n      ,SQLUser.POSerial.Discount2\n      ,SQLUser.POSerial.Discount3\n      ,SQLUser.POSerial.Discount4\n      ,SQLUser.POSerial.Discount5\n      ,SQLUser.POSerial.Discount6\n      ,SQLUser.POSerial.Discount7\n      ,SQLUser.POSerial.Discount8\n      ,SQLUser.POSerial.Discount9\n      ,SQLUser.POSerial.Discount10\n      ,SQLUser.POSerial.Discount1Method\n      ,SQLUser.POSerial.Discount2Method\n      ,SQLUser.POSerial.Discount3Method\n      ,SQLUser.POSerial.Discount4Method\n      ,SQLUser.POSerial.Discount5Method\n      ,SQLUser.POSerial.Discount6Method\n      ,SQLUser.POSerial.Discount7Method\n      ,SQLUser.POSerial.Discount8Method\n      ,SQLUser.POSerial.Discount9Method\n      ,SQLUser.POSerial.Discount10Method\n      ,SQLUser.POSerial.Discount1Rate\n      ,SQLUser.POSerial.Discount2Rate\n      ,SQLUser.POSerial.Discount3Rate\n      ,SQLUser.POSerial.Discount4Rate\n      ,SQLUser.POSerial.Discount5Rate\n      ,SQLUser.POSerial.Discount6Rate\n      ,SQLUser.POSerial.Discount7Rate\n      ,SQLUser.POSerial.Discount8Rate\n      ,SQLUser.POSerial.Discount9Rate\n      ,SQLUser.POSerial.Discount10Rate\n      ,SQLUser.POSerial.DyeLot\n      ,SQLUser.POSerial.Available\n      ,SQLUser.POSerial.BinLocationCode\n      ,SQLUser.POSerial.Cost\n      ,SQLUser.POSerial.Costed\n      ,SQLUser.POSerial.DateReceived\n      ,SQLUser.POSerial.Features\n      ,SQLUser.POSerial.FloorPlan\n      ,SQLUser.POSerial.FloorPlanDueDate\n      ,SQLUser.POSerial.LocationCode\n      ,SQLUser.POSerial.ModelCode\n      ,SQLUser.POSerial.ModelDateStamp\n      ,SQLUser.POSerial.ModelLineTimeStamp\n      ,SQLUser.POSerial.Ordered\n      ,SQLUser.POSerial.POCode\n      ,SQLUser.POSerial.Received\n      ,SQLUser.POSerial.Returned\n      ,SQLUser.POSerial.RunNumber\n      ,SQLUser.POSerial.SerialCode\n      ,SQLUser.POSerial.SupplierInvoice\n      ,SQLUser.POSerial.TrustDocument\n      ,SQLUser.POSerial.TrustDocumentLine\nfrom \nSQLUser.POSerial INNER JOIN SQLUser.PO ON\nSQLUser.POSerial.POCode=SQLUser.PO.Code\n where @{pipeline().parameters.Data_Source_WaterMarkColumn2} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}'and @{pipeline().parameters.Data_Source_WaterMarkColumn2} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_POSerialDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_POSerial Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_POSerial]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[POSerial_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test_2_Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[POSerial_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='PO' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Test_2_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.POSerial"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "ModelDateStamp"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.POSerial"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.POSerial.ModelDateStamp"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "POSerial"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_WaterMarkColumn2": {
						"type": "string",
						"defaultValue": "SQLUser.PO.DateStarted"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-10T14:34:44Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PO_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='PO'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select ID\n      ,FloorPlan\n      ,ShipToType\n      ,SerialTypeCode\n      ,ReceiveToLocation\n      ,ReceiveToLocationCode\n      ,DateEffective\n      ,Unreleased\n      ,DateCreated\n      ,UserCreated\n      ,Authorized\n      ,DateAuthorized\n      ,UserAuthorized\n      ,Received\n      ,DateConfirmedReceived\n      ,UserReceived\n      ,Paid\n      ,DatePaid\n      ,UserPaid\n      ,EDISentDate\n      ,EDISentTime\n      ,RequestedDeliveryDate\n      ,Buyer\n      ,Code\n      ,Confirmed\n      ,CostFactor\n      ,DateConfirmed\n      ,DateCosted\n      ,DateFinished\n      ,DateOrdered\n      ,DateReceived\n      ,DateStarted\n      ,FloorPlanDays\n      ,ShipToAddress1\n      ,ShipToAddress2\n      ,ShipToCity\n      ,ShipToCode\n      ,ShipToName\n      ,ShipToNotes\n      ,ShipToPhone1\n      ,ShipToPhone2\n      ,ShipToState\n      ,ShipToZipCode\n      ,SupplierAccountNumber\n      ,SupplierAddress1\n      ,SupplierAddress2\n      ,SupplierCity\n      ,SupplierCode\n      ,SupplierContact1\n      ,SupplierContact2\n      ,SupplierCustomerServicePhone\n      ,SupplierDescription\n      ,SupplierEmail\n      ,SupplierFax\n      ,SupplierPONotes\n      ,SupplierPhone1\n      ,SupplierPhone2\n      ,SupplierShipVia\n      ,SupplierState\n      ,SupplierWebsite\n      ,SupplierZipCode\n      ,TotalCosted\n      ,TotalOrdered\n      ,TotalReceived\n      ,UserConfirmed\nfrom \n@{pipeline().parameters.Data_Source_Table_Name} \n\t where @{pipeline().parameters.Data_Source_WaterMarkColumn_modified} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' \n\t and @{pipeline().parameters.Data_Source_WaterMarkColumn_modified} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' \n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_PODataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_PO]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[PO_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test_2_Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[PO_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='PO' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Test_2_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.PO"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "DateStarted"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.PO"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.PO.DateStarted"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "PO"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-10T04:40:19Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductMinor_Cache to ODS Copy Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Branch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.ProductMinor"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_ProductMinorDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Branch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_ProductMinor]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ProductMinor_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateControlTable",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ODSProductMinor_Truncate]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "ProductMinor"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-10T04:28:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Product_Cache to ODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Branch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.Product"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_ProductDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Branch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Product]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Product_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateControlTable",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ODSProduct_Truncate]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Product"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-10T04:06:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SaleReferral_Cache to ODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate SaleReferral",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.SaleReferral"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_SaleReferralDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate SaleReferral",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_SaleReferral]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SaleReferral_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateControlTable",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ODSSaleReferral_Truncate]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "SaleReferral"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-04T14:31:07Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesPerson_Cache to ODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Salesperson",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.SalesPerson"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_SalesPersonDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Salesperson",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_SalesPerson]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SalesPerson_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateControlTable",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ODSSalesPerson_Truncate]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "SalesPerson"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-04T13:21:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Serial_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Serial'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Serial Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select  ID\n      ,RawBarcode\n      ,OrderedForInvoiceCode\n      ,OrderedForInvoiceDateStamp\n      ,OrderedForInvoiceTimeStamp\n      ,Spiff\n      ,SpiffEndDate\n      ,SpiffStartDate\n      ,POLineTimeStamp\n      ,PODateStamp\n      ,DateReserved\n      ,Notes\n      ,OriginalCost\n      ,FreightAmount\n      ,FreightInvoiceNumber\n      ,ResizePicture\n      ,PicturePath\n      ,StandardCost\n      ,ReserveExclusive\n      ,SerialTypeCode\n      ,UniqueSellPrice\n      ,Discount1\n      ,Discount2\n      ,Discount3\n      ,Discount4\n      ,Discount5\n      ,Discount6\n      ,Discount7\n      ,Discount8\n      ,Discount9\n      ,Discount10\n      ,ReserveExclusiveCommentCode\n      ,TagPrice\n      ,Discount1Method\n      ,Discount2Method\n      ,Discount3Method\n      ,Discount4Method\n      ,Discount5Method\n      ,Discount6Method\n      ,Discount7Method\n      ,Discount8Method\n      ,Discount9Method\n      ,Discount10Method\n      ,Discount1Rate\n      ,Discount2Rate\n      ,Discount3Rate\n      ,Discount4Rate\n      ,Discount5Rate\n      ,Discount6Rate\n      ,Discount7Rate\n      ,Discount8Rate\n      ,Discount9Rate\n      ,Discount10Rate\n      ,SupplierCode\n      ,DyeLot\n      ,Available\n      ,BinLocationCode\n      ,Code\n      ,Cost\n      ,DateReceived\n      ,Features\n      ,FloorPlan\n      ,FloorPlanDueDate\n      ,InvLineDateStamp\n      ,InvLineTimeStamp\n      ,InvoiceCode\n      ,LocationCode\n      ,ModelCode\n      ,POCode\n      ,RunNumber\n      ,Status\n      ,SupplierInvoice\n      ,TrustDocument\n      ,TrustDocumentLine\n      \nfrom \n@{pipeline().parameters.Data_Source_Table_Name} \n\t where @{pipeline().parameters.Data_Source_WaterMarkColumn_modified} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' \n\t and @{pipeline().parameters.Data_Source_WaterMarkColumn_modified} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' \n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_SerialDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Serial Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Serial]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Serial_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test_2_Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Serial_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Serial' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Test_2_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.Serial"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "DateReceived"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.Serial"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.Serial.DateReceived"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Serial"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-03T22:29:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Supplier_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Supplier'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select ID\n      ,AdditionalBillTo\n      ,FloorPlanning\n      ,ETADays\n      ,BranchCode\n      ,Memo\n      ,BankAccount\n      ,DefaultPONumber\n      ,DefaultLocation\n      ,Branch\n      ,ImmediateReservedDays\n      ,CreditGLAccount\n      ,CRDueDateTerms\n      ,CRDueDays\n      ,EFTBankingInstitution\n      ,EFTBranch\n      ,EFTBankAccount\n      ,EFTContactName\n      ,EFTContactPhone\n      ,EFTContactExtension\n      ,EFTContactFax\n      ,EFTEmail\n      ,EDIFormat\n      ,DefaultPOCost\n      ,AvgLeadTime\n      ,Obsolete\n      ,DefaultCostCenter\n      ,Require1099\n      ,UseDueDateForSplitPayments\n      ,AutoCreateAPInvoiceCosting\n      ,EDIOutFolder\n      ,DeliveryDateRequired\n      ,UseRDDFrom\n      ,AccountNumber\n      ,Address1\n      ,Address2\n      ,BillToSupplierCode\n      ,City\n      ,Code\n      ,Contact1\n      ,Contact2\n      ,CustomerServicePhone\n      ,DateCreated\n      ,DateModified\n      ,Description\n      ,DiscountDateTerms\n      ,DiscountDays\n      ,DiscountGLAccount\n      ,DiscountPercentage\n      ,DueDateTerms\n      ,DueDays\n      ,Email\n      ,Fax\n      ,Field1\n      ,Field2\n      ,Field3\n      ,Field4\n      ,Field5\n      ,FreightGLAccount\n      ,GSTCharged\n      ,InventorySupplier\n      ,LastYearPurchase\n      ,Note\n      ,NoteToPO\n      ,POCostFactor\n      ,POFloorPlanDays\n      ,POLineType\n      ,POMinOrder\n      ,PONote\n      ,POPrintISE\n      ,POShipVia\n      ,POUpdateAP\n      ,Phone1\n      ,Phone2\n      ,PrevLastYearPurchase\n      ,PrintAccountOnCheck\n      ,PurchaseGLAccount\n      ,State\n      ,SupplierTypeCode\n      ,TINNumber\n      ,UserCreated\n      ,UserModified\n      ,Website\n      ,YTDPurchase\n      ,ZipCode\nfrom \n@{pipeline().parameters.Data_Source_Table_Name} \n\t where (@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' \n         OR SQLUser.Supplier.DateModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')\n\t and (@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'  OR\n       SQLUser.Supplier.DateModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}')\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_SupplierDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Supplier]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Supplier_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test_2_Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Supplier_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Supplier' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Test_2_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.Supplier"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "DateCreated"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.Supplier"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.Supplier.DateCreated"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Supplier"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-10T01:20:24Z"
			},
			"dependsOn": []
		}
	]
}